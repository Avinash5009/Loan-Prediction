import pandas as pd
import numpy as np
import os

##set working directory##
os.chdir('E:\Loan prediction python')

##import the data##

train = pd.read_csv('train_u6lujuX_CVtuZ9i.csv')
test = pd.read_csv('test_Y3wMUE5_7gLdaTN.csv')

## we get how many variables has missing values##

train_missing = train.isnull().sum()
test_missing = test.isnull().sum()

##we impute the missing values in all the variables##

train['Gender'].isnull().sum()
train['Gender'].value_counts()
train['Gender'] = np.where(train['Gender'].isnull(),'Male',train['Gender'])
train['Gender'].isnull().sum()

train['Married'].isnull().sum()
train['Married'].value_counts()
train['Married'] = np.where(train['Married'].isnull(),'Yes',train['Married'])
train['Married'].isnull().sum()

train['Dependents'].isnull().sum()
train['Dependents'].value_counts()
train['Dependents'] = train['Dependents'].replace('3+',3)
train['Dependents'] = np.where(train['Dependents'].isnull(),0,train['Dependents'])
train['Dependents'].isnull().sum()


train['Self_Employed'].isnull().sum()
train['Self_Employed'].value_counts()
train['Self_Employed'] = np.where(train['Self_Employed'].isnull(),'No',train['Self_Employed'])
train['Self_Employed'].isnull().sum()



train['LoanAmount'].isnull().sum()
train['LoanAmount'].value_counts()
train['LoanAmount'] = np.where(train['LoanAmount'].isnull(),np.nanmedian(train['LoanAmount']),train['LoanAmount'])
train['LoanAmount'].isnull().sum()


train['Loan_Amount_Term'].isnull().sum()
train['Loan_Amount_Term'].value_counts()
train['Loan_Amount_Term'] = np.where(train['Loan_Amount_Term'].isnull(),np.nanmedian(train['Loan_Amount_Term']),train['Loan_Amount_Term'])
train['Loan_Amount_Term'].isnull().sum()


train['Credit_History'].isnull().sum()
train['Credit_History'].value_counts()
train['Credit_History'] = np.where(train['Credit_History'].isnull(),1.0,train['Credit_History'])
train['Credit_History'].isnull().sum()


train.to_csv('check_csv')

##in python the vsriables which have strings need to be converted to numeric, so we use encoding here##

from sklearn.preprocessing import LabelEncoder
LE = LabelEncoder()

train['Gender'] = LE.fit_transform(train['Gender'])
train['Gender'].value_counts()

train['Married'] = LE.fit_transform(train['Married'])
train['Married'].value_counts()

train['Education'] = LE.fit_transform(train['Education'])
train['Education'].value_counts()


train['Self_Employed'] = LE.fit_transform(train['Self_Employed'])
train['Self_Employed'].value_counts()


train['Property_Area'] = LE.fit_transform(train['Property_Area'])
train['Property_Area'].value_counts()

train['Loan_Status'] = LE.fit_transform(train['Loan_Status'])
train['Loan_Status'].value_counts()

###now we create model###


##divide the data into X and Y##
Y = train['Loan_Status']
X = train.iloc[:,1:11]


## since we know that it is a classfication problem where we predict if they take the loan or not, so we go logistic regression##
from sklearn.linear_model import LogisticRegression
Log_Reg = LogisticRegression()
Log_Reg.fit(X,Y)
Preds_Log_Reg = Log_Reg.predict(X)

##since logistic regression we use consufion matrix as it is classification##

from sklearn.metrics import confusion_matrix

cm_log_reg = confusion_matrix(Y,Preds_Log_Reg)

##we got 81% accuracy on test data while using logistic regression##

##using randon forest##

from sklearn.ensemble import RandomForestClassifier

RF = RandomForestClassifier(n_estimators=500)
RF.fit(X,Y)
Preds_RF = RF.predict(X)

cm_RF = confusion_matrix(Y,Preds_RF)

## we got 100% while using this##

##using SVM##

from sklearn import svm

SVM_RF = svm.SVC()
SVM_RF.fit(X,Y)
Preds_SVM = SVM_RF.predict(X)

cm_SVM = confusion_matrix(Y,Preds_SVM)

##we got 99% on the above model##

###using naive bayes theorem###

from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
gnb.fit(X,Y)
pred_gnb = gnb.predict(X)
cm_gnb = confusion_matrix(Y,pred_gnb)

##we got 80% using the above model##

###now we apply all the things we did on test data###

test['Gender'].isnull().sum()
test['Gender'].value_counts()
test['Gender'] = np.where(test['Gender'].isnull(),'Male',test['Gender'])
test['Gender'].isnull().sum()


test['Dependents'].isnull().sum()
test['Dependents'].value_counts()
test['Dependents'] = test['Dependents'].replace('3+',3)
test['Dependents'] = np.where(test['Dependents'].isnull(),0,test['Dependents'])
test['Dependents'].isnull().sum()


test['Self_Employed'].isnull().sum()
test['Self_Employed'].value_counts()
test['Self_Employed'] = np.where(test['Self_Employed'].isnull(),'No',test['Self_Employed'])
test['Self_Employed'].isnull().sum()



test['LoanAmount'].isnull().sum()
test['LoanAmount'].value_counts()
test['LoanAmount'] = np.where(test['LoanAmount'].isnull(),np.nanmedian(test['LoanAmount']),test['LoanAmount'])
test['LoanAmount'].isnull().sum()


test['Loan_Amount_Term'].isnull().sum()
test['Loan_Amount_Term'].value_counts()
test['Loan_Amount_Term'] = np.where(test['Loan_Amount_Term'].isnull(),np.nanmedian(test['Loan_Amount_Term']),test['Loan_Amount_Term'])
test['Loan_Amount_Term'].isnull().sum()


test['Credit_History'].isnull().sum()
test['Credit_History'].value_counts()
test['Credit_History'] = np.where(test['Credit_History'].isnull(),1.0,test['Credit_History'])
test['Credit_History'].isnull().sum()

test.to_csv('check_csv_1')

## now we do encoding for the variables as in pythong it does not understand characters or strings while building model

from sklearn.preprocessing import LabelEncoder
LE = LabelEncoder()

test['Gender'] = LE.fit_transform(test['Gender'])
test['Gender'].value_counts()

test['Married'] = LE.fit_transform(test['Married'])
test['Married'].value_counts()

test['Education'] = LE.fit_transform(test['Education'])
test['Education'].value_counts()


test['Self_Employed'] = LE.fit_transform(test['Self_Employed'])
test['Self_Employed'].value_counts()


test['Property_Area'] = LE.fit_transform(test['Property_Area'])
test['Property_Area'].value_counts()

##we use the random forest on test data
##before that we check how the test data came after doing thee encoding

summary = test

##now we divide the test data and remove the Loan_ID variable to for calculation of confusion matrix

test_new = train.iloc[:,1:11]

##now we apply the random forest model

from sklearn.ensemble import RandomForestClassifier

Preds_RF_test = RF.predict(test_new)

test_new['Loan Status'] = Preds_RF_test

from sklearn.metrics import confusion_matrix

cm_RF_actual = confusion_matrix(test['Loan_ID'],test_new['Loan Status'])

##accuracy is around 88% on this, need to try different models


